{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 TimesNewRomanPSMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf2 \expnd0\expndtw0\kerning0
Software components:
\f1\b0 \
\'a0\
\pard\pardeftab720\partightenfactor0
\cf2 \ul \ulc2 Classs:\ulnone \
Cortex\
\pard\pardeftab720\li960\fi-480\partightenfactor0
\cf2 -
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 Handles data (time series array of LFP), data preprocessing, fits data to spiking model predefined, and holds parameters.\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
Class attributes:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Lfp_data (array of timeseries)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Spike_model (class)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Connectivity_matrix (matrix of connectivity weights between neuronal layers)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Neron_density (array of density in each neural layer 1-5)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Sampling rate (int describing frequency of timeseries of lfp data)\
\'a0\
\ul Functions:\ulnone \
Preprocessing_data(self)\
\pard\pardeftab720\li1440\fi-480\partightenfactor0
\cf2 -
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 preforms filtering into frequency bands to help with model fitting and normalization of the LFP data\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
fit_model(self,error_tolerence)\
\pard\pardeftab720\li1440\fi-480\partightenfactor0
\cf2 -
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 fits the LFP data to the model class given an error tolerance that is used for each frequency band.\
-
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 First runs the model and checks to see if the LFP generated matches the frequency bands of the input LFP data\
-
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 Checks error tolerance\
-
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 Updates model parameters with gradient descent and runs the model again\
-
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 Repeat until error_tolerance is reached\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
output_connectivity(self)\
\pard\pardeftab720\li1440\fi-480\partightenfactor0
\cf2 -
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 returns the parameters of the model fit to the data\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
visualize_connectivity(self)\
\pard\pardeftab720\li1440\fi-480\partightenfactor0
\cf2 -
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 outputs a visual representation of the neural activity in the form of 5 neuronal layers with densitys and connections between layers with a density that reflects the connectivity of the model parameters\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
\ul Class\ulnone :\
SpikingNetwork \
\pard\pardeftab720\li1440\fi-480\partightenfactor0
\cf2 -
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 intitializes a network of spiking neurons with predefined connectivity and neuronal density parameters that can be fit to the neural data\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
Class attributes:\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Num_neurons (int defines number of neruons in the network)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Connectivity_matrix (matrix of connectivity between each layer and the other layers of the model.\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Neuronal_threshold (array that defines the membrane potential of each neuron)\
\'a0\
\'a0\
\'a0\
\ul Functions\ulnone :\
Simulate_step (self)\
\pard\pardeftab720\li1440\fi-480\partightenfactor0
\cf2 -
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 updates the neuronal_threshold via a monte carlo simulation and applies the update given the connectivity_matrix\
-
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 checks if neruons reach their firing threshold potential \
-
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 resets neurons that spike\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
run_stimulation(self, T, dt)\
\pard\pardeftab720\li1440\fi-480\partightenfactor0
\cf2 -
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 funs the simulation_step function over a set time period (T) and time steps (dt)\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
output_parameters:\
\pard\pardeftab720\li1440\fi-480\partightenfactor0
\cf2 -
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 outputs the model parameters which are neuronal densities of each layer and the connectivity matrix\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
generate_LFP:\
\pard\pardeftab720\li1440\fi-480\partightenfactor0
\cf2 -
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 simulates an lfp by summing the membrane potentials at each time step by weighting the membrane potentials by the depth of network layer\
-
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 outputs stimulated LFP\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 Interactions to accomplish use cases
\f1\b0 :\
\'a0\
Use Case: Find connectivity and neuronal density given an experimentally recorded LFP. This generalized use case fits all three use cases in the functional specifications that can be used for different analysis processes.\
\'a0\
For this generalized case, the Cortex class will need to be inialized given a recorded LFP and sampling rate. The Cortex class will the need to go through a preprocess_data step to transform the data into a usable form for the model. Then the user will need to use the fit_model function and input an error tolerance. This step will initialize the model that runs for T time (the number of timesteps of the input LFP) at a step of dt (the sampling rate of the LFP). The model will fit the generated LFP to the experimental LFP by updating the model parameters (the neuronal density and the connectivity matrix).\'a0 This step will take the longest time since a single spiking model will take a considerable time to generate. The user can then visualize the model with the visualize_connectivity function.\
\'a0\
\'a0\
\'a0\
\'a0\
\'a0\

\f0\b Preliminary plan
\f1\b0 :\
\pard\pardeftab720\li960\fi-480\partightenfactor0
\cf2 1.
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 Implement the neuronal spiking class to generate realistic LFPs and neuronal spiking data\
2.
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 Implement the Cortex class and intitalize\
3.
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 Run one iteration of the model_fit class to see how well a single run fits the parametres\
4.
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 Run on multiple interations of the model_fit class to see if changes need to be made to the gradient descent step of the function \
5.
\f2\fs18\fsmilli9333 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f1\fs32 Final touches and optimization\
}